package	javax.microedition.lcdui.game;

import java.util.ArrayList;

import javax.microedition.lcdui.Graphics;
import javax.microedition.lcdui.Image;

public class Sprite	extends	Layer
{

	public static final	int	TRANS_MIRROR = 2;
	public static final	int	TRANS_MIRROR_ROT180	= 1;
	public static final	int	TRANS_MIRROR_ROT270	= 4;
	public static final	int	TRANS_MIRROR_ROT90 = 7;
	public static final	int	TRANS_NONE = 0;
	public static final	int	TRANS_ROT180 = 3;
	public static final	int	TRANS_ROT270 = 6;
	public static final	int	TRANS_ROT90	= 5;


	private int x;
	private int y;

	private int refX;
	private int refY;

	private int hitX;
	private int hitY;
	private int hitWidth;
	private int hitHeight;

	private int transform;

	private ArrayList<Image> frames;
	private ArrayList<Integer> framesWidth;
	private ArrayList<Integer> framesHeight;
	private ArrayList<Integer> sequence;

	private int frame;

	public Image sprite;

	public Sprite(Image image)
	{
		System.out.println("Sprite image");
		sprite = image;
	}

	public Sprite(Image image, int frameWidth, int frameHeight)
	{
		System.out.println("Sprite image w,h");
		sprite = image;
	}

	public Sprite(Sprite s)
	{
		System.out.println("Sprite sprite");
		sprite = s.sprite;
	}

	public boolean collidesWith(Image image, int x, int y, boolean pixelLevel) { return false; }

	public boolean collidesWith(Sprite s, boolean pixelLevel) { return false; }

	public boolean collidesWith(TiledLayer t, boolean pixelLevel) { return false; }

	public void defineCollisionRectangle(int x, int y, int width, int height)
	{
		hitX = x;
		hitY = y;
		hitWidth = width;
		hitHeight = height;
	}

	public void defineReferencePixel(int x, int y)
	{
		refX = x;
		refY = y;
	}

	public int getFrame() { return frame; }

	public int getFrameSequenceLength() { return sequence.size(); }

	public int getRawFrameCount() { return frames.size(); }

	public int getRefPixelX() { return refX; }

	public int getRefPixelY() { return refY; }

	public void nextFrame()
	{
		if(frame<frames.size()-1)
		{
			frame++;
		}
	}

	public void paint(Graphics g)
	{
		g.drawImage(sprite, 0, 0, 0);
	}

	public void prevFrame()
	{
		if(frame!=0)
		{
			frame--;
		}
	}

	public void setFrame(int sequenceIndex) { frame = sequenceIndex; }

	public void setFrameSequence(int[] fsequence)
	{
		frame = 0;
		sequence.clear();
		for(int i=0; i<fsequence.length; i++)
		{
			sequence.add(fsequence[i]);
		}
	}

	public void setImage(Image img, int frameWidth, int frameHeight)
	{
		frames.add(img);
		framesWidth.add(frameWidth);
		framesHeight.add(height);
		sequence.add(frames.size()-1);
	}

	public void setRefPixelPosition(int x, int y)
	{
		refX = x;
		refY = y;
	}

	public void setTransform(int itransform) { transform = itransform; }

}
